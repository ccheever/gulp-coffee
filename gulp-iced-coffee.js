// Generated by IcedCoffeeScript 108.0.11
var PluginError, applySourceMap, gulpIcedCoffee, gutil, iced, merge, path, through;

through = require("through2");

iced = require("iced-coffee-script");

gutil = require("gulp-util");

applySourceMap = require("vinyl-sourcemaps-apply");

path = require("path");

merge = require("merge");

PluginError = gutil.PluginError;

gulpIcedCoffee = function(options) {
  var replaceExtension, transform;
  replaceExtension = function(path) {
    path = path.replace(/\.coffee\.md$/, ".litcoffee");
    path = path.replace(/\.iced\.md$/, ".liticed");
    return gutil.replaceExtension(path, ".js");
  };
  transform = function(file, enc, cb) {
    var data, defaults, dest, err, str;
    if (file.isNull()) {
      return cb(null, file);
    }
    if (file.isStream()) {
      return cb(new PluginError("gulp-iced-coffee", "Streaming not supported"));
    }
    data = void 0;
    str = file.contents.toString("utf8");
    dest = replaceExtension(file.path);
    defaults = {
      bare: false,
      header: false,
      sourceMap: !!file.sourceMap,
      sourceRoot: false,
      literate: /\.(litcoffee|coffee\.md|liticed|iced\.md)$/.test(file.path),
      filename: file.path,
      sourceFiles: [file.relative],
      generatedFile: replaceExtension(file.relative)
    };
    options = merge(defaults, options);
    try {
      console.log(str);
      data = iced.compile(str, options);
    } catch (_error) {
      err = _error;
      return cb(new PluginError("gulp-iced-coffee", err));
    }
    console.log(data);
    if (data && data.v3SourceMap && file.sourceMap) {
      applySourceMap(file, data.v3SourceMap);
      file.contents = new Buffer(data.js);
    } else {
      file.contents = new Buffer(data);
    }
    file.path = dest;
    return cb(null, file);
  };
  return through.obj(transform);
};

module.exports = gulpIcedCoffee;

//# sourceMappingURL=gulp-iced-coffee.js.map
